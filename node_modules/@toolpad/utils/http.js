"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listen = listen;
var http = _interopRequireWildcard(require("http"));
var _invariant = _interopRequireDefault(require("invariant"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * A Promise wrapper for server.listen
 */
async function listen(handler, port) {
  const server = typeof handler === 'function' ? http.createServer(handler) : handler;
  let app;
  await new Promise((resolve, reject) => {
    app = server.listen(port);
    app.once('listening', resolve);
    app.once('error', reject);
  });
  const address = app?.address();
  (0, _invariant.default)(address && typeof address === 'object', 'expected address to be an AddressInfo object');
  return {
    port: address.port,
    async close() {
      await new Promise((resolve, reject) => {
        if (app) {
          app.close(err => {
            if (err) {
              reject(err);
            } else {
              resolve();
            }
          });
        } else {
          resolve();
        }
      });
    }
  };
}