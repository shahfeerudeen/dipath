"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useDebouncedHandler;
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function defer(fn, params, delay) {
  const timeout = setTimeout(() => {
    fn.current(...params);
  }, delay);
  return {
    startTime: Date.now(),
    timeout,
    params
  };
}

/**
 * Creates a debounced version of the handler that is passed. The invocation of [fn] is
 * delayed for [delay] milliseconds from the last invocation of the debounced function.
 *
 * This implementation adds on the lodash implementation in that it handles updates to the
 * delay value.
 */
function useDebouncedHandler(fn, delay) {
  const fnRef = React.useRef(fn);
  React.useEffect(() => {
    fnRef.current = fn;
  }, [fn]);
  const delayedInvocation = React.useRef(null);
  const clearCurrent = React.useCallback(() => {
    if (delayedInvocation.current) {
      clearTimeout(delayedInvocation.current.timeout);
      delayedInvocation.current = null;
    }
  }, []);
  React.useEffect(() => {
    if (!delayedInvocation.current) {
      return;
    }
    const {
      startTime,
      params
    } = delayedInvocation.current;
    const elapsed = Date.now() - startTime;
    const newDelay = Math.max(delay - elapsed, 0);
    clearCurrent();
    delayedInvocation.current = defer(fnRef, params, newDelay);
  }, [delay, clearCurrent]);
  return React.useCallback((...params) => {
    clearCurrent();
    delayedInvocation.current = defer(fnRef, params, delay);
  }, [delay, clearCurrent]);
}