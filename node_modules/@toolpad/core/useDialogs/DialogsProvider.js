"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DialogsProvider = DialogsProvider;
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
var _useEventCallback = _interopRequireDefault(require("@mui/utils/useEventCallback"));
var _DialogsContext = require("./DialogsContext");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Provider for Dialog stacks. The subtree of this component can use the `useDialogs` hook to
 * access the dialogs API. The dialogs are rendered in the order they are requested.
 *
 * Demos:
 *
 * - [useDialogs](https://mui.com/toolpad/core/react-use-dialogs/)
 *
 * API:
 *
 * - [DialogsProvider API](https://mui.com/toolpad/core/api/dialogs-provider)
 */
function DialogsProvider(props) {
  const {
    children,
    unmountAfter = 1000
  } = props;
  const [stack, setStack] = React.useState([]);
  const keyPrefix = React.useId();
  const nextId = React.useRef(0);
  const dialogMetadata = React.useRef(new WeakMap());
  const requestDialog = (0, _useEventCallback.default)(function open(Component, payload, options = {}) {
    const {
      onClose = async () => {}
    } = options;
    let resolve;
    const promise = new Promise(resolveImpl => {
      resolve = resolveImpl;
    });
    (0, _invariant.default)(resolve, 'resolve not set');
    const key = `${keyPrefix}-${nextId.current}`;
    nextId.current += 1;
    const newEntry = {
      key,
      open: true,
      promise,
      Component,
      payload,
      onClose,
      resolve
    };

    // Store metadata for reliable access during close
    dialogMetadata.current.set(promise, newEntry);
    setStack(prevStack => [...prevStack, newEntry]);
    return promise;
  });
  const closeDialogUi = (0, _useEventCallback.default)(function closeDialogUi(dialog) {
    setStack(prevStack => prevStack.map(entry => entry.promise === dialog ? {
      ...entry,
      open: false
    } : entry));
    setTimeout(() => {
      // wait for closing animation
      setStack(prevStack => prevStack.filter(entry => entry.promise !== dialog));
      // WeakMap automatically cleans up when promise is garbage collected
    }, unmountAfter);
  });
  const closeDialog = (0, _useEventCallback.default)(async function closeDialog(dialog, result) {
    const entryToClose = dialogMetadata.current.get(dialog);
    (0, _invariant.default)(entryToClose, 'dialog not found');
    try {
      await entryToClose.onClose(result);
    } finally {
      entryToClose.resolve(result);
      closeDialogUi(dialog);
    }
    return dialog;
  });
  const contextValue = React.useMemo(() => ({
    open: requestDialog,
    close: closeDialog
  }), [requestDialog, closeDialog]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_DialogsContext.DialogsContext.Provider, {
    value: contextValue,
    children: [children, stack.map(({
      key,
      open,
      Component,
      payload,
      promise
    }) => /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      payload: payload,
      open: open,
      onClose: async result => {
        await closeDialog(promise, result);
      }
    }, key))]
  });
}